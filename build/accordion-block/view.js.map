{"version":3,"file":"accordion-block/view.js","mappings":";;;;;AAAA,MAAMA,UAAU,GAAGC,QAAQ,CAACC,gBAAgB,CAC3C,0CACD,CAAC;AACD;AACAF,UAAU,CAACG,OAAO,CAAIC,SAAS,IAAM;EACpC,MAAM;IAAEC,eAAe;IAAEC;EAAiB,CAAC,GAAGC,cAAc,CAAEH,SAAU,CAAC;EACzEC,eAAe,CAACG,gBAAgB,CAAE,OAAO,EAAE,MAC1CC,mBAAmB,CAAEJ,eAAe,EAAEC,gBAAgB,EAAEF,SAAU,CACnE,CAAC;AACF,CAAE,CAAC;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,mBAAmBA,CAAEJ,eAAe,EAAEK,KAAK,EAAEN,SAAS,EAAG;EACjEO,eAAe,GACdN,eAAe,CAACO,YAAY,CAAE,eAAgB,CAAC,KAAK,MAAM;EAC3D,IAAK,CAAED,eAAe,EAAG;IACxB;IACAX,UAAU,CAACG,OAAO,CAAIC,SAAS,IAAM;MACpC,MAAM;QAAEC,eAAe;QAAEC;MAAiB,CAAC,GAC1CC,cAAc,CAAEH,SAAU,CAAC;MAC5B,IAAKE,gBAAgB,KAAKI,KAAK,EAAG;QACjCG,gBAAgB,CAAET,SAAS,EAAE,QAAS,CAAC;QACvCC,eAAe,CAACS,YAAY,CAAE,eAAe,EAAE,OAAQ,CAAC;MACzD;IACD,CAAE,CAAC;EACJ;EACAD,gBAAgB,CAAET,SAAS,EAAE,QAAS,CAAC;EACvCC,eAAe,CAACS,YAAY,CAAE,eAAe,EAAE,CAAEH,eAAgB,CAAC;AACnE;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASJ,cAAcA,CAAEH,SAAS,EAAG;EACpC,MAAMC,eAAe,GAAGD,SAAS,CAACW,aAAa,CAAE,uBAAwB,CAAC;EAC1E,MAAMC,UAAU,GAAGX,eAAe,CAACO,YAAY,CAAE,eAAgB,CAAC;EAClE,MAAMN,gBAAgB,GAAGL,QAAQ,CAACgB,cAAc,CAAED,UAAW,CAAC;EAC9D,OAAO;IAAEX,eAAe;IAAEC;EAAiB,CAAC;AAC7C;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASO,gBAAgBA,CAAEK,OAAO,EAAEC,IAAI,EAAG;EAC1C,IAAK,QAAQ,KAAKA,IAAI,EAAG;IACxBD,OAAO,CAACE,SAAS,CAACC,MAAM,CAAE,aAAc,CAAC;EAC1C,CAAC,MAAM;IACNH,OAAO,CAACE,SAAS,CAACE,MAAM,CAAE,aAAc,CAAC;EAC1C;AACD,C","sources":["webpack://a11y-day-accordion-block/./src/accordion-block/view.js"],"sourcesContent":["const accordions = document.querySelectorAll(\n\t'.wp-block-a11y-day-accordion-inner-block'\n);\n// Add event listeners to all accordions and toggle them on click\naccordions.forEach( ( accordion ) => {\n\tconst { accordionHeader, accordionContent } = accordionParts( accordion );\n\taccordionHeader.addEventListener( 'click', () =>\n\t\ttoggleAccordionItem( accordionHeader, accordionContent, accordion )\n\t);\n} );\n\n/**\n * Toggle the accordion item\n * @param {HTMLElement} accordionHeader the button that controls the accordion\n * @param {HTMLElement} panel the panel that is controlled by the accordion\n * @param {HTMLElement} accordion the accordion item\n */\nfunction toggleAccordionItem( accordionHeader, panel, accordion ) {\n\tisAccordionOpen =\n\t\taccordionHeader.getAttribute( 'aria-expanded' ) === 'true';\n\tif ( ! isAccordionOpen ) {\n\t\t// Hide every panel but the one we want to show\n\t\taccordions.forEach( ( accordion ) => {\n\t\t\tconst { accordionHeader, accordionContent } =\n\t\t\t\taccordionParts( accordion );\n\t\t\tif ( accordionContent !== panel ) {\n\t\t\t\ttoggleIsSelected( accordion, 'remove' );\n\t\t\t\taccordionHeader.setAttribute( 'aria-expanded', 'false' );\n\t\t\t}\n\t\t} );\n\t}\n\ttoggleIsSelected( accordion, 'toggle' );\n\taccordionHeader.setAttribute( 'aria-expanded', ! isAccordionOpen );\n}\n\n/**\n * Get the header and content elements of an accordion item\n * @param {HTMLElement} accordion An accordion item\n * @returns an object containing the accordion header and content element\n */\nfunction accordionParts( accordion ) {\n\tconst accordionHeader = accordion.querySelector( 'button[aria-expanded]' );\n\tconst controlsId = accordionHeader.getAttribute( 'aria-controls' );\n\tconst accordionContent = document.getElementById( controlsId );\n\treturn { accordionHeader, accordionContent };\n}\n\n/**\n * Add or remove the is-selected class from an Element\n * @param {HTMLELEMENT} element the element to add or remove the class from\n * @param {string} type accepts \"toggle\" or \"remove\"\n */\nfunction toggleIsSelected( element, type ) {\n\tif ( 'toggle' === type ) {\n\t\telement.classList.toggle( 'is-selected' );\n\t} else {\n\t\telement.classList.remove( 'is-selected' );\n\t}\n}\n"],"names":["accordions","document","querySelectorAll","forEach","accordion","accordionHeader","accordionContent","accordionParts","addEventListener","toggleAccordionItem","panel","isAccordionOpen","getAttribute","toggleIsSelected","setAttribute","querySelector","controlsId","getElementById","element","type","classList","toggle","remove"],"sourceRoot":""}